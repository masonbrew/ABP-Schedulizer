/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gradlebuild;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.gson.GsonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.sheets.v4.Sheets;
import com.google.api.services.sheets.v4.SheetsScopes;
import com.google.api.services.sheets.v4.model.Spreadsheet;
import com.google.api.services.sheets.v4.model.SpreadsheetProperties;
import com.google.api.services.sheets.v4.model.ValueRange;
import com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;

import com.google.api.services.drive.Drive;
import com.google.api.services.drive.DriveScopes;
import com.google.api.services.drive.model.File;
import com.google.api.services.drive.model.FileList;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.security.GeneralSecurityException;
import java.util.*;
import java.awt.Desktop;




public class Schedulizer {
    public static void main(final String[] args) throws IOException, GeneralSecurityException {
        // Build a new authorized API client service.
        final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
        Sheets sheetService =
            new Sheets.Builder(HTTP_TRANSPORT, JSON_FACTORY, getCredentials(HTTP_TRANSPORT))
                .setApplicationName(APPLICATION_NAME)
                .build();

        Scanner sc= new Scanner(System.in); 
        //Get the link to the google sheets roster
        System.out.println("");
        System.out.print("Copy the link to your the google sheets roster: ");  
        String rosterLink ="";
        rosterLink = sc.nextLine();
        String rosterSpreadsheetID = linkToID(rosterLink);
        System.out.println("");
        System.out.println("");


        //Get the link to the googleg sheets TOA(time off approval)
        System.out.println("");
        System.out.print("Copy the link to your the google sheets TOAs: ");  
        String toaLink= sc.nextLine();            
        String toaSpreadsheetID = linkToID(toaLink);
        System.out.println("");
        System.out.println("");

        //create the settings
        System.out.println("");
        Settings settings = new Settings(sc);

        //Get the start date from the user
        boolean complete;
        {
        complete = true;
        System.out.println("");
        System.out.print("Enter the start date of the schedule (mm/dd/yyyy):");
        System.out.println("");
        String startDateString = sc.nextLine();
        System.out.println("");
        try {
            settings.setStartDate(startDateString);
        }
        catch (IllegalArgumentException illegalDateException){
            System.out.println("Illegal date");
            complete = false;
        }
        } while (complete == false);


        String input;
        {
            System.out.println("");
            System.out.print("Use default settings? (Y/N):");
            System.out.println("");
            input = sc.nextLine().toLowerCase();
            if (input.equals("n")){
                settings.userSetup();
            }else if (input.equals("y")){
            }
            else {
                System.out.println("");
                System.out.println("Invalid input");
                System.out.println("");
            }
        }   while (input.equals("n") == false && input.equals("y") == false);
        input = null; 
        
        

        ValueRange rosterValueRange = sheetService.spreadsheets().values()
        .get(rosterSpreadsheetID, "Sheet1")
        .execute();
        Roster roster = new Roster(rosterValueRange, settings);
 
        ValueRange toaValueRange = sheetService.spreadsheets().values()
        .get(toaSpreadsheetID, "Sheet1")
        .execute();

        roster.setDaysOff(toaValueRange);
        Schedule schedule = new Schedule(roster, settings);

        String resultID = schedule.createSpreadsheet(sheetService);
        System.out.println("");
        System.out.println("If link fails to open enter link for schedule");
        System.out.println("https://docs.google.com/spreadsheets/d/" + resultID);
        if (Desktop.isDesktopSupported()) {        
            Desktop desktop = Desktop.getDesktop();
            try {
                URI uri = new URI("https://docs.google.com/spreadsheets/d/" + resultID);
                desktop.browse(uri);
            } catch (IOException excp) {
                excp.printStackTrace();
            } catch (URISyntaxException excp) {
                excp.printStackTrace();
            }  
        }
        
        System.out.println("Press enter to exit");  
        String dummy;
        dummy = sc.nextLine();

        sc.close();

    }

    private static final String APPLICATION_NAME = "ABP Schedulizer";
    private static final JsonFactory JSON_FACTORY = GsonFactory.getDefaultInstance();
    private static final String TOKENS_DIRECTORY_PATH = "tokens";
    private static final String CREDENTIALS_FILE_PATH = "/credentials.json";

    /**
     * Global instance of the scopes required by this quickstart.
     * If modifying these scopes, delete your previously saved tokens/ folder.
     */
    private static final List<String> SCOPES =
        Collections.singletonList(SheetsScopes.SPREADSHEETS);

    /**
    * Creates an authorized Credential object.
    *
    * @param HTTP_TRANSPORT The network HTTP Transport.
    * @return An authorized Credential object.
    * @throws IOException If the credentials.json file cannot be found.
    */
    private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT)
    throws IOException {
    // Load client secrets.
    InputStream in = Schedulizer.class.getResourceAsStream(CREDENTIALS_FILE_PATH);
    if (in == null) {
    throw new FileNotFoundException("Resource not found: " + CREDENTIALS_FILE_PATH);
    }
    GoogleClientSecrets clientSecrets =
        GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));

    // Build flow and trigger user authorization request.
    GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
        HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
        .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
        .setAccessType("offline")
        .build();
    LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(8888).build();
    return new AuthorizationCodeInstalledApp(flow, receiver).authorize("user");
    }



    
    private static String linkToID(String input) {
        int startIndex = input.indexOf("/d/") + 3; // Add 3 to skip "/d/"
        int endIndex = input.indexOf("/", startIndex);
        
        if (startIndex != -1 && endIndex != -1) {
            return input.substring(startIndex, endIndex);
        } else {
            return null;
        }
    }

    
}